{"version":3,"file":"../server/public/javascripts/app.js","sources":["app/config/app.coffee","app/config/router.coffee","app/config/store.coffee","app/initialize.coffee","app/models/Filter.coffee","app/models/Group.coffee","app/routes/IndexRoute.coffee","app/templates/application.hbs","app/templates/dropdown-option.hbs","app/templates/dropdown.hbs","app/templates/index.hbs","app/views/DropdownView.coffee","app/views/OptionsView.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;;A,CCAA;;AACA;AACA;AACA;AACA;AAJA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A","sourcesContent":["module.exports = Ember.Application.create({\n  LOG_TRANSITIONS: true,\n  LOG_TRANSITIONS_INTERNAL: true,\n  rootElement: '#brooklyn-united'\n});\n","module.exports = App.Router.map(function() {\n  return this.route('filter', {\n    path: '/filter/*params'\n  });\n});\n","App.Adapter = DS.RESTAdapter.extend({\n  host: 'http://bu.dev',\n  namespace: 'api/1'\n});\n\nApp.Serializer = DS.RESTSerializer.extend({\n  normalize: function(property, hash, type) {\n    var json, prop, value;\n    json = {};\n    for (prop in hash) {\n      value = hash[prop];\n      json[prop.camelize()] = value;\n    }\n    return this._super(property, json, type);\n  }\n});\n\nmodule.exports = App.Store = DS.Store.extend({\n  revision: 13,\n  adapter: App.Adapter\n});\n","var folderOrder;\n\nwindow.App = require('config/app');\n\nrequire('config/router');\n\nrequire('config/store');\n\nfolderOrder = ['initializers', 'mixins', 'routes', 'models', 'fixtures', 'views', 'controllers', 'helpers', 'templates', 'components'];\n\nfolderOrder.forEach(function(folder) {\n  return window.require.list().filter(function(module) {\n    return new RegExp(\"^\" + folder + \"/\").test(module);\n  }).forEach(function(module) {\n    return require(module);\n  });\n});\n","module.exports = App.Filter = DS.Model.extend({\n  title: DS.attr('string'),\n  group: DS.belongsTo('group')\n});\n","module.exports = App.Group = DS.Model.extend({\n  title: DS.attr('string'),\n  filters: DS.hasMany('filter')\n});\n\nApp.GroupSerializer = App.Serializer.extend();\n","module.exports = App.IndexRoute = Ember.Route.extend({\n  model: function() {\n    return this.store.find('group');\n  },\n  setupController: function(controller, model) {\n    return controller.set('groups', model);\n  }\n});\n","Ember.TEMPLATES['application'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","Ember.TEMPLATES['dropdown-option'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"dropdown-option template\\n\");\n  \n});","Ember.TEMPLATES['dropdown'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<span class=\\\"display\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"view.displayName\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n\");\n  return buffer;\n  \n});","Ember.TEMPLATES['index'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div class=\\\"hero madlibs panel\\\">\\n  <header id=\\\"madlib-header\\\">\\n    <h1>Hello</h1>\\n    <h2>We are Brooklyn United</h2>\\n  </header>\\n  <div id=\\\"filters\\\">\\n    <h3>Nice to Meet You</h3>\\n    <p>\");\n  hashContexts = {'contentBinding': depth0,'key': depth0,'id': depth0};\n  hashTypes = {'contentBinding': \"STRING\",'key': \"STRING\",'id': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"App.DropdownView\", {hash:{\n    'contentBinding': (\"groups\"),\n    'key': (\"viewers\"),\n    'id': (\"viewers-select\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\", We'd love to show you our \");\n  hashContexts = {'contentBinding': depth0,'key': depth0,'id': depth0};\n  hashTypes = {'contentBinding': \"STRING\",'key': \"STRING\",'id': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"App.DropdownView\", {hash:{\n    'contentBinding': (\"groups\"),\n    'key': (\"work\"),\n    'id': (\"work-select\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" that \");\n  hashContexts = {'contentBinding': depth0,'key': depth0,'id': depth0};\n  hashTypes = {'contentBinding': \"STRING\",'key': \"STRING\",'id': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"App.DropdownView\", {hash:{\n    'contentBinding': (\"groups\"),\n    'key': (\"team\"),\n    'id': (\"team-select\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" has collaborated on.</p>\\n    <p><small>Please also check out our \");\n  hashContexts = {'contentBinding': depth0,'key': depth0,'id': depth0};\n  hashTypes = {'contentBinding': \"STRING\",'key': \"STRING\",'id': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"App.DropdownView\", {hash:{\n    'contentBinding': (\"groups\"),\n    'key': (\"culture\"),\n    'id': (\"culture-select\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" and \");\n  hashContexts = {'contentBinding': depth0,'key': depth0,'id': depth0};\n  hashTypes = {'contentBinding': \"STRING\",'key': \"STRING\",'id': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"App.DropdownView\", {hash:{\n    'contentBinding': (\"groups\"),\n    'key': (\"misc\"),\n    'id': (\"misc-select\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" while you're here!</small></p>\\n    <a href=\\\"#\\\">View</a>\\n  </div>\\n</div>\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = App.DropdownView = Ember.View.extend({\n  templateName: 'dropdown',\n  tagName: 'span',\n  classNames: ['dropdown'],\n  selected: null,\n  init: function() {\n    var groupFilter, key, length;\n    key = this.get('key');\n    groupFilter = this.get('content').filter(function(record) {\n      return record.get('title') === key;\n    });\n    this.set('group', groupFilter[0]);\n    length = this.get('group.filters').toArray().length;\n    key = Math.floor(Math.random() * length);\n    this.selected = this.get('group.filters').objectAt(key);\n    return this._super([].slice.call(arguments));\n  },\n  displayName: (function() {\n    if (this.selected != null) {\n      return this.selected.get('title');\n    }\n  }).property('@each.filter'),\n  click: function() {\n    return this.createChildView(App.OptionsView, {\n      content: this.get('group.filters')\n    });\n  }\n});\n","module.exports = App.OptionsView = Ember.CollectionView.extend({\n  tagName: 'ul',\n  classNames: ['select-options'],\n  itemViewClass: Ember.View.extend({\n    tagName: 'li',\n    templateName: 'dropdown-option'\n  })\n});\n"]}